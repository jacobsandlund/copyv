diff --git a/Users/mbazero/tmp/old b/Users/mbazero/tmp/new
index e9207ae..a6945c8 100644
--- a/Users/mbazero/tmp/old
+++ b/Users/mbazero/tmp/new
@@ -109,7 +109,7 @@ fn stepWcwidth(ptr: *anyopaque) Benchmark.Error!void {
     const f = self.data_f orelse return;
     var r = std.io.bufferedReader(f.reader());
     var d: UTF8Decoder = .{};
-    var buf: [4096]u8 = undefined;
+    var buf: [4096]u8 align(std.atomic.cache_line) = undefined;
     while (true) {
         const n = r.read(&buf) catch |err| {
             log.warn("error reading data file err={}", .{err});
@@ -121,11 +121,7 @@ fn stepWcwidth(ptr: *anyopaque) Benchmark.Error!void {
             const cp_, const consumed = d.next(c);
             assert(consumed);
             if (cp_) |cp| {
-                const width = wcwidth(cp);
-
-                // Write the width to the buffer to avoid it being compiled
-                // away
-                buf[0] = @intCast(width);
+                std.mem.doNotOptimizeAway(wcwidth(cp));
             }
         }
     }
@@ -137,7 +133,7 @@ fn stepTable(ptr: *anyopaque) Benchmark.Error!void {
     const f = self.data_f orelse return;
     var r = std.io.bufferedReader(f.reader());
     var d: UTF8Decoder = .{};
-    var buf: [4096]u8 = undefined;
+    var buf: [4096]u8 align(std.atomic.cache_line) = undefined;
     while (true) {
         const n = r.read(&buf) catch |err| {
             log.warn("error reading data file err={}", .{err});
@@ -151,14 +147,10 @@ fn stepTable(ptr: *anyopaque) Benchmark.Error!void {
             if (cp_) |cp| {
                 // This is the same trick we do in terminal.zig so we
                 // keep it here.
-                const width = if (cp <= 0xFF)
+                std.mem.doNotOptimizeAway(if (cp <= 0xFF)
                     1
                 else
-                    table.get(@intCast(cp)).width;
-
-                // Write the width to the buffer to avoid it being compiled
-                // away
-                buf[0] = @intCast(width);
+                    table.get(@intCast(cp)).width);
             }
         }
     }
@@ -170,7 +162,7 @@ fn stepSimd(ptr: *anyopaque) Benchmark.Error!void {
     const f = self.data_f orelse return;
     var r = std.io.bufferedReader(f.reader());
     var d: UTF8Decoder = .{};
-    var buf: [4096]u8 = undefined;
+    var buf: [4096]u8 align(std.atomic.cache_line) = undefined;
     while (true) {
         const n = r.read(&buf) catch |err| {
             log.warn("error reading data file err={}", .{err});
@@ -182,11 +174,7 @@ fn stepSimd(ptr: *anyopaque) Benchmark.Error!void {
             const cp_, const consumed = d.next(c);
             assert(consumed);
             if (cp_) |cp| {
-                const width = simd.codepointWidth(cp);
-
-                // Write the width to the buffer to avoid it being compiled
-                // away
-                buf[0] = @intCast(width);
+                std.mem.doNotOptimizeAway(simd.codepointWidth(cp));
             }
         }
     }
